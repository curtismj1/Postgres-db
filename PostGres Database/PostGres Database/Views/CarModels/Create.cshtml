@model PostGres_Database.Models.CarModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<h2>Create</h2>

@using (Html.BeginForm("Create", "CarModels", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Car Model Information</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })



        <div class="form-group">
            @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriceRange, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PriceRange, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PriceRange, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mileage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mileage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mileage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransmissionType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransmissionType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransmissionType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div id="demo"></div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
        <text>
            <script>
                var x = document.getElementById("demo");
               
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(showPosition);
                    } else {
                        x.innerHTML = "Geolocation is not supported by this browser.";
                    }
          
                function showPosition(position) {
                    x.innerHTML = "Latitude: " + position.coords.latitude +
                    "<br>Longitude: " + position.coords.longitude;
                }
            </script>
        </text>




        @if (Model != null)
        {
            for (int i = 0; i < Model.ImagePaths.Count; i++)
            {
                @Html.HiddenFor(model => Model.ImagePaths[i])
            }
        }

    </div>
}

@using (Html.BeginForm("Upload", "CarModels", FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    <fieldset>

        <legend> Upload Image </legend>
        <label for="Image">Image</label>
        <input type="file" name="uploadedImage" />
        <br />
        <input type="submit" value="Upload" />
    </fieldset>
    <h1>Uploaded Images</h1>

    if (Model != null)
    {
        if (Model.ImagePaths != null)
        {
            <u1 class="small-block-grid-3">
                @foreach (var img in Model.ImagePaths)
                {
                    <li>
                        <img src="..\@img" . alt="image" width="300" , height="200" />
                    </li>
                }
            </u1>
            for (int i = 0; i < Model.ImagePaths.Count; i++)
            {
                @Html.HiddenFor(model => Model.ImagePaths[i])
            }

        }
    }

}


